/* mobilecaddy-utils - v2.0.0 - Bundle Time: 2018-03-12 15:46:01 */
/* git info: "2018-03-08 11:35:36 +0000": 34e66b2d6ddf746b6814f8563e576e511cc89c8f (v2) */
/* Copyright 2018 MobileCaddy Ltd */

import*as smartStoreUtils from"./smartStoreUtils";import*as appDataUtils from"./appDataUtils";var LOG_LEVEL_ERROR=0,LOG_LEVEL_WARN=1,LOG_LEVEL_LOG=2,LOG_LEVEL_INFO=3,LOG_LEVEL_DEBUG=4;function hasLogType(){return new Promise(function(o,e){localStorage.hasLogType?o(localStorage.hasLogType):smartStoreUtils.listMobileTableColumns("Mobile_Log__mc",smartStoreUtils.FULL,function(e){void 0===_.find(e,{path:"mobilecaddy1__Log_Type__c"})?(localStorage.setItem("hasLogType","false"),o("false")):(localStorage.setItem("hasLogType","true"),o("true"))},function(o){e(o)})})}function insertLog(o,e){return new Promise(function(t,r){if(1==e.length&&(e=e[0]),"object"==typeof e&&(e=JSON.stringify(e)),"string"==typeof e){o==LOG_LEVEL_ERROR&&localStorage.setItem("lastErrorLog",e.substring(0,1024));var n={mobilecaddy1__Error_Text__c:e.substring(0,1024),SystemModstamp:(new Date).getTime()};appDataUtils.getCachedCurrentValueFromAppSoup("audId").then(function(o){return n.mobilecaddy1__Application_User_Device__c=o,hasLogType()}).then(function(e){"true"==e&&(n.mobilecaddy1__Log_Type__c="D"+o.toString()),smartStoreUtils.insertRecords("Mobile_Log__mc",[n],function(o){t()},function(o){r(o)})}).catch(function(o){console.error(o),r(o)})}else logger.error("Trying to log unsupported type",typeof e),r("Trying to log unsupported type"+typeof e)})}function doLog(o,e,t,r){var n=localStorage.getItem("logLevel");if((n=void 0===n?0:n)>=e){var a="";if(e>0){var L=r.stack.split("\n")[4];if(void 0!==L){var i=L.indexOf("at ");a=L.slice(i+2,L.length)}}var s=t[0];switch(e){case LOG_LEVEL_ERROR:t[0]&&t[0].stack&&(s=t[0].message+", STACK:"+t[0].stack),t[1]&&t[1].stack&&(s+="\n"+t[1].message+", STACK:"+t[1].stack),insertLog(e,s),console.error.apply(console,t);break;case LOG_LEVEL_WARN:n>=LOG_LEVEL_WARN&&(insertLog(e,t),console.log.apply(console,t),console.log(a));break;default:n>=LOG_LEVEL_LOG&&(insertLog(e,t),console.log.apply(console,t),console.log(a))}o&&(console.info("Dispatching error"),"undefined"!=typeof LOCAL_DEV&&alert(s+"\n\nSee dev console for more information"))}}function getErrorObject(){try{throw Error("")}catch(o){return o}}function debug(o){return doLog(!1,LOG_LEVEL_DEBUG,arguments,getErrorObject())}function error(o){return doLog(!1,LOG_LEVEL_ERROR,arguments)}function errorAndDispatch(o){return doLog(!0,LOG_LEVEL_ERROR,arguments)}function info(o){return doLog(!1,LOG_LEVEL_INFO,arguments,getErrorObject())}function log(o){return doLog(!1,LOG_LEVEL_LOG,arguments,getErrorObject())}function warn(o){return doLog(!1,LOG_LEVEL_WARN,arguments,getErrorObject())}export{debug,error,errorAndDispatch,info,log,warn,hasLogType};