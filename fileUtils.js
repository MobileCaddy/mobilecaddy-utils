/* mobilecaddy-utils - v2.0.1 - Bundle Time: 2019-03-28 14:56:38 */
/* git info: "2019-03-28 14:56:20 +0000": 5b442bdf4f3a9846e8098c3171e7efb248af71ad (v2) */
/* Copyright 2019 MobileCaddy Ltd */

"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.downloadFiles=downloadFiles,exports.storeFilesInfo=storeFilesInfo,exports.getStorageDirectory=getStorageDirectory,exports.readAsDataURL=readAsDataURL;var appDataUtils=_interopRequireWildcard(require("./appDataUtils")),smartStoreUtils=_interopRequireWildcard(require("./smartStoreUtils")),_syncRefresh=require("./syncRefresh"),logger=_interopRequireWildcard(require("./logger")),_=_interopRequireWildcard(require("underscore")),_zlib=require("zlib");function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var t=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,o):{};t.get||t.set?Object.defineProperty(r,o,t):r[o]=e[o]}return r.default=e,r}var storageDirectory,cdvFileURI,smartstore=cordova.require("com.salesforce.plugin.smartstore"),logTag="fileUtils.js",RECORD_FILES_TABLE="File_Library__ap",QUERY_PAGE_SIZE=1e4,CONTENT_VSN_FIELD="SF_Content_Version_Id__c",SYNC_FIELD="Synchronised__c",FILE_TYPE_FIELD="File_Type__c",LOCAL_PATH_FIELD="Local_Path",USE_FORCETK=!!window.USE_FORCETK,LOCAL_DEV=!!window.LOCAL_DEV;function getStorageDirectory(){return(storageDirectory=localStorage.getItem("mcFileStorageDirectory"))||(storageDirectory=cordova.file?cordova.file.documentsDirectory?cordova.file.documentsDirectory:cordova.file.dataDirectory:"CodeFlow",localStorage.setItem("mcFileStorageDirectory",storageDirectory),storageDirectory)}function storeFilesInfo(e){return new Promise(function(r,o){storageDirectory||getStorageDirectory(),console.log(logTag,"storeFilesInfo",e);var t=e,n="",i=(t.map(function(e,r){return n+=0===r?"'"+e.Id+"'":",'"+e.Id+"'",e.Id}),"SELECT {"+RECORD_FILES_TABLE+":Id} FROM {"+RECORD_FILES_TABLE+"} WHERE {"+RECORD_FILES_TABLE+":Id} IN ("+n+")"),l=smartstore.buildSmartQuerySpec(i,QUERY_PAGE_SIZE);smartStoreUtils.smartQuerySoupRecordsWithQuerySpec(l).then(function(e){var r;return r=0!==e.length?t.filter(function(r){return!e[0].includes(r.Id)}):t,smartStoreUtils.upsertSoupEntries(RECORD_FILES_TABLE,r)}).then(function(e){r(e)}).catch(function(e){o(e)})})}function readAsDataURL(e){return new Promise(function(r,o){if(cordova.platformId)if("ios"==cordova.platformId)if(cdvFileURI)r(cdvFileURI+e);else{var t=localStorage.getItem("cdvFileURI");t?r((cdvFileURI=t)+e):window.resolveLocalFileSystemURL(getStorageDirectory(),function(o){cdvFileURI=o.toInternalURL(),localStorage.setItem("cdvFileURI",cdvFileURI),r(cdvFileURI+e)})}else window.resolveLocalFileSystemURL(getStorageDirectory(),function(t){t.getFile(e,{},function(e){var t=new FileReader;t.onloadend=function(){void 0!==t.result||null!==t.result?r(t.result):void 0!==t.error||null!==t.error?o(t.error):o({code:null,message:"READER_ONLOADEND_ERR"})},e.file(function(e){t.readAsDataURL(e)},function(e){console.error(e),o(e)})})});else r("/mock/files/"+e)})}function downloadFiles(){return new Promise(function(e,r){var o,t,n;storageDirectory||getStorageDirectory(),getFilesToDownload().then(function(r){r.length>0?(n=r,appDataUtils.getCurrentValueFromAppSoup("accessToken").then(function(e){return o=e||JSON.parse(localStorage.getItem("forceOAuth")).access_token,appDataUtils.getCurrentValueFromAppSoup("instanceUrl")}).then(function(e){return t=e||JSON.parse(localStorage.getItem("forceOAuth")).instance_url+"/",Promise.all(n.map(function(e){return doDownloadFile(e,o,t).then(function(e){return logger.log("resp",e),e})})).then(function(e){return logger.log("accum",e),e})}).then(function(r){logger.log("res1",r),e(r)})):(logger.log("No files to download"),e())}).catch(function(e){r(e)})})}function doDownloadFile(e,r,o){return logger.log(logTag,"doDownloadFile",e),new Promise(function(t,n){LOCAL_DEV&&!USE_FORCETK?t():getFileIdFromContentVersionId(e[1],r,o).then(function(i){var l=o+"/services/data/v39.0/connect/files/"+i+"/content";if(logger.log(logTag,"urlToDownload",l),i&&i.length>0){var a=new Headers;a.append("Authorization","Bearer "+r),a.append("Content-Type","image/jpeg");var s={method:"GET",headers:a,mode:"cors"},c=new Request(l);fetch(c,s).then(function(r){switch(logger.log(logTag,r),r.status){case 200:saveFile(e,r),t(r);break;case 401:(0,_syncRefresh.refreshToken)(function(r){return doDownloadFile(e,r,o)},function(e){logger.error(logTag,"Failed to refresh token",e),n(e)});break;default:logger.error("resp.status",r.status),logger.error("resp.statusText",r.statusText),logger.error("resp.type",r.type),t(r)}}).catch(function(e){logger.error("Something went wrong!",e),n(e)})}else t()}).catch(function(e){logger.error(e),n(e)})})}function getFileIdFromContentVersionId(e,r,o){console.log("getFileIdFromContentVersionId",e,r,o);var t=o+"/services/data/v39.0/sobjects/ContentVersion/"+e;return new Promise(function(o,n){if(e&&e.length>0){logger.log(logTag,"urlToDownload",t);var i=new Headers;i.append("Authorization","Bearer "+r),i.append("Content-Type","application/json");var l={method:"GET",headers:i,mode:"cors"},a=new Request(t);fetch(a,l).then(function(e){return logger.log(logTag,e),200==e.status?e.json():(logger.error("resp.status",e.status),logger.error("resp.statusText",e.statusText),logger.error("resp.type",e.type),Promise.reject("Failed to read ContentVersionId object"))}).then(function(e){console.log("json",e),o(e.ContentDocumentId)}).catch(function(e){logger.error("Something went wrong!",e),n(e)})}else o(null)})}function getFilesToDownload(){return new Promise(function(e,r){smartstore.soupExists(RECORD_FILES_TABLE,function(o){if(o){var t="SELECT {"+RECORD_FILES_TABLE+":Id},{"+RECORD_FILES_TABLE+":"+CONTENT_VSN_FIELD+"},{"+RECORD_FILES_TABLE+":"+FILE_TYPE_FIELD+"} FROM {"+RECORD_FILES_TABLE+"} WHERE {"+RECORD_FILES_TABLE+":"+SYNC_FIELD+"} = 0",n=smartstore.buildSmartQuerySpec(t,QUERY_PAGE_SIZE);smartStoreUtils.smartQuerySoupRecordsWithQuerySpec(n).then(function(r){logger.log("Query res",r),r&&r[0]?e(r):e([])}).catch(function(e){r(e)})}else e([])},function(e){logger.error("Failed to check soupExists for "+RECORD_FILES_TABLE),r(e)})})}function saveFile(e,r){"CodeFlow"!=storageDirectory?window.resolveLocalFileSystemURL(storageDirectory,function(o){logger.log("file system open: "+o.name),o.getFile(e[1]+"."+e[2],{create:!0,exclusive:!1},function(o){writeFile(o,r).then(function(r){updateFileRec(e)})})}):r.arrayBuffer().then(function(r){var o=btoa(new Uint8Array(r).reduce(function(e,r){return e+String.fromCharCode(r)},""));USE_FORCETK&&saveFileToMock(e[1]+"."+e[2],o),updateFileRec(e)})}function writeFile(e,r){return new Promise(function(o,t){e.createWriter(function(e){e.onwriteend=function(){logger.log("Successful file write..."),o()},e.onerror=function(e){logger.error("Failed file write: "+e.toString()),t()},r.arrayBuffer().then(function(r){e.write(r)})})})}function updateFileRec(e){var r="SELECT * FROM {"+RECORD_FILES_TABLE+"} WHERE {"+RECORD_FILES_TABLE+":Id} = '"+e[0]+"'";logger.log("soql",r);var o=smartstore.buildSmartQuerySpec(r,1);smartStoreUtils.smartQuerySoupRecordsWithQuerySpec(o).then(function(r){var o=r[0][1];logger.log("myRec",o),o[SYNC_FIELD]=1,o[LOCAL_PATH_FIELD]=storageDirectory+e[1]+"."+e[2],smartstore.upsertSoupEntriesWithExternalId(RECORD_FILES_TABLE,[o],"Id",function(e){logger.log("File DB entry updated",e)})}).catch(function(e){logger.error("Error updating "+RECORD_FILES_TABLE+" following file save",e)})}function saveFileToMock(e,r){console.log("saveFileToMock");var o={filename:e,base64:r};fetch("http://localhost:3000/codeflow/storefile",{method:"POST",headers:{"Content-Type":"application/json; charset=utf-8"},body:JSON.stringify(o)}).then(function(e){console.log("storefile",e.status)}).catch(function(e){return console.error("Error:",e)})}