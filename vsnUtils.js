/* mobilecaddy-utils - v2.0.0 - Bundle Time: 2018-03-12 15:46:01 */
/* git info: "2018-03-08 11:35:36 +0000": 34e66b2d6ddf746b6814f8563e576e511cc89c8f (v2) */
/* Copyright 2018 MobileCaddy Ltd */

import*as devUtils from"./devUtils.js";import*as appDataUtils from"./appDataUtils";import*as smartStoreUtils from"./smartStoreUtils";import*as syncRefresh from"./syncRefresh";import*as logger from"./logger";var smartstore=cordova.require("com.salesforce.plugin.smartstore"),SYSTEM_TABLES=["recsToSync"];function getSoupsToClear(e,o){return new Promise(function(o,t){null===e?smartStoreUtils.listMobileTables(smartStoreUtils.ALPHA,function(e){var t=SYSTEM_TABLES;_.each(e,function(e){t.push(e),t.push("SnapShot_"+e),localStorage.removeItem("meta-tableDEF-"+e),localStorage.removeItem("meta-tableCRUD-"+e)}),console.debug("allTables",t),o(t)},function(e){t(e)}):o([])})}function clearSoups(e,o){return new Promise(function(t,r){getSoupsToClear(e,o).then(function(e){return Promise.all(e.map(smartStoreUtils.deleteSoup))}).then(function(){t()}).catch(function(e){logger.error(e),r(e)})})}function hardReset(e){return new Promise(function(o,t){var r={},n=e?"Version Upgrade":"HardReset",i="";testRefreshAccessToken().then(function(){devUtils.readRecords("appSoup").then(function(e){return e.records.forEach(function(e){r[e.Name]=e.CurrentValue}),console.info("appSoupRecs",JSON.stringify(r)),clearSoups(null,["appSoup"])}).then(function(){i=getBootstrapUrl(r),console.log("resetURL",i);var e="";console.debug("deletedSoups OK");var a,s,c=getAppEnv();if("codeflow"==c&&(a=localStorage.getItem("forceOAuth"),s=localStorage.getItem("appSoup")),localStorage.clear(),"codeflow"==c)localStorage.setItem("forceOAuth",a),localStorage.setItem("appSoup",s),e=window.location.protocol+"//"+window.location.host+"/www",o("ok");else if("platform"==c)e=window.location.href.substr(0,window.location.href.indexOf("#"));else{var l,u="";if(navigator&&navigator.connection&&(u=navigator.connection.type),window.device&&(l=window.device),navigator.appVersion.includes("Electron")){l=ipcRenderer.sendSync("request-device-info",""),u="wifi";var p="landscape"}e=i+"?deviceUuid="+l.uuid+"&deviceName="+l.name+"&deviceCordova="+l.cordova+"&deviceVersion="+l.version+"&deviceModel="+l.model+"&buildName="+r.buildName+"&buildVersion="+r.buildVersion+"&buildOS="+r.buildOS+"&knownAud="+r.audId+"&currentDv="+r.dynVersionNumber+"&orientation="+p+"&viewportWidth="+$j(window).width()+"&viewportHeight="+$j(window).height()+"&sessionType="+n+"&connType="+u+"&loginUrl="+r.loginUrl+"&millsFromEpoch="+(new Date).getTime()}appDataUtils.updateNewValueInAppSoup("buildStatus","Resetting").then(function(){console.info("AppSoup Updated for reset"),smartStoreUtils.deleteSoup("syncLib_system_data").then(function(r){console.log("Redirecting to: "+e);try{window.location.href=e}catch(e){logger.errorAndDispatch("error on redirect",e),t(e)}o()}).catch(function(e){logger.errorAndDispatch(e)}),o()}).catch(function(e){logger.errorAndDispatch(e),t(e)})}).catch(function(e){logger.errorAndDispatch(e),t(e)})}).catch(function(e){logger.error("Tokens are bad, testRefreshAccessToken rejected with: "+JSON.stringify(e)),window.history.go(-(history.length-1)),navigator.appVersion.includes("Electron")||cordova.require("com.salesforce.plugin.sfaccountmanager").logout(),t(e)})})}function getBootstrapUrl(e){var o="/apex/<PKG-NAMESPACE>MobileCaddyBootstrap001_mc";switch(e.platAuthUrl){case"i":case"I":resetURL=e.instanceUrl+o;break;case"l":case"L":resetURL=e.loginUrl+o;break;case"":resetURL=void 0;break;default:resetURL=e.platAuthUrl}return resetURL||(e.authURLType||(e.authURLType="login"),resetURL="login"==e.authURLType?e.loginUrl+o:e.instanceUrl+o),resetURL}function testRefreshAccessToken(){return new Promise(function(e,o){syncRefresh.refreshToken(function(o){console.debug("Successfully refreshed access token. Continue reset."),e("ok")},function(e){console.error("Unable to refresh access token. Abort reset: "+JSON.stringify(e)),o(e)})})}function checkForMigrateToInfo(e){return new Promise(function(o,t){null!==e.migrateTo&&void 0!==e.migrateTo?appDataUtils.updateNewValueInAppSoup("dynVersionNumber",e.migrateTo).then(function(){o()}).catch(function(e){logger.error(e),t(e)}):o()})}function getAppEnv(){return"localhost:3030"==window.location.host?"codeflow":"undefined"!=typeof mockStore?navigator.appVersion.includes("Electron")?"desktop":"platform":"device"}function upgradeAvailable(){return new Promise(function(e,o){smartStoreUtils.queryMobileTable("appSoup","Name","dynVersionNumber").then(function(o){void 0!==o[0].NewValue&&o[0].NewValue!=o[0].CurrentValue?e(!0):e(!1)}).catch(function(e){logger.error(e),o(e)})})}function upgradeIfAvailable(){return new Promise(function(e,o){upgradeAvailable().then(function(o){o?connSessUtils.getRTSPendingconnSess(function(o){if(null===o||void 0===o)return hardReset(!0);e(!1)},function(o){e(!1)}):e(!1)}).catch(function(e){logger.error(e),o(e)})})}function _getBootstrapUrl(e){return getBootstrapUrl(e)}export{checkForMigrateToInfo,clearSoups,getSoupsToClear,hardReset,upgradeAvailable,upgradeIfAvailable,_getBootstrapUrl};